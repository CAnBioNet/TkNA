# Reconstruct network
	python ./reconstruction/intake_data.py --data-dir ./testing/toy_network_four_consis_edges/input/ --out-file ./testing/toy_network_four_consis_edges/output/all_data_and_metadata.cdf
		- takes ~15 seconds on two cores

	python ./reconstruction/run.py --data-source ./testing/toy_network_four_consis_edges/output/all_data_and_metadata.cdf --config-file ./testing/toy_network_four_consis_edges/input/config_per_type_corr_p0.2.json --out-file ./testing/toy_network_four_consis_edges/output/network_output.zip
		- takes ~25 seconds on two cores

	python reconstruction/to_csv.py --data-file ./testing/toy_network_four_consis_edges/output/network_output.zip --config-file ./testing/toy_network_four_consis_edges/input/config_per_type_corr_p0.2.json --out-dir ./testing/toy_network_four_consis_edges/output/network_output
		- runs pretty much instantly on two cores

# Assess network quality
	python analysis/assess_network.py --file ./testing/toy_network_four_consis_edges/output/network_output/correlations_bw_signif_measurables.csv --source partner1 --target partner2
		- runs pretty much instantly on two cores

# Analyze network, including calculating BiBC and degree for nodes
	python ./analysis/calc_network_properties.py --pickle ./testing/toy_network_four_consis_edges/output/network_output/network.pickle --bibc --bibc-groups node_types --bibc-calc-type rbc --node-map ./testing/toy_network_four_consis_edges/input/type_map_new.csv --node-groups gene pheno
		- takes ~5 seconds on two cores


# Create random networks and find top BiBC/degree nodes in each network
	python ./random_networks/create_random_networks.py --template-network ./testing/toy_network_four_consis_edges/output/network_output/network.pickle --networks-file ./testing/toy_network_four_consis_edges/output/network_output/random_networks.pickle
		- takes ~7 seconds on two cores

	python ./random_networks/compute_network_stats.py --networks-file ./testing/toy_network_four_consis_edges/output/network_output/random_networks.pickle --bibc-groups node_types --bibc-calc-type rbc --node-map ./testing/toy_network_four_consis_edges/input/type_map_new.csv --node-groups gene pheno  --stats-file ./testing/toy_network_four_consis_edges/output/network_output/random_network_results.pickle
		- takes ~7 seconds on two cores

	python ./random_networks/synthesize_network_stats.py --network-stats-file ./testing/toy_network_four_consis_edges/output/network_output/random_network_results.pickle --synthesized-stats-file ./testing/toy_network_four_consis_edges/output/network_output/random_networks_synthesized.csv
		- runs instantly on two cores

# Visualize results
	python ./visualization/dot_plots.py --pickle ./testing/toy_network_four_consis_edges/output/network_output/network.pickle --node-props ./testing/toy_network_four_consis_edges/output/network_output/node_properties.txt --network-file ./testing/toy_network_four_consis_edges/output/network_output/network_output_comp.csv --propx BiBC --propy Node_degrees --top-num 4 --top-num-per-type 3
		- takes ~7 seconds on two cores

	python ./visualization/plot_abundance.py --pickle ./testing/toy_network_four_consis_edges/output/network_output/inputs_for_downstream_plots.pickle --abund-data ./testing/toy_network_four_consis_edges/input/Expt1_new.csv ./testing/toy_network_four_consis_edges/input/Expt2_new.csv ./testing/toy_network_four_consis_edges/input/Expt3_new.csv ./testing/toy_network_four_consis_edges/input/Expt4_new.csv --metadata ./testing/toy_network_four_consis_edges/input/group_map_1.csv ./testing/toy_network_four_consis_edges/input/group_map_2.csv ./testing/toy_network_four_consis_edges/input/group_map_3.csv ./testing/toy_network_four_consis_edges/input/group_map_4.csv --color-group Treatment --x-axis Experiment
		- takes ~7 seconds on two cores

	#!!!!!!! Note: The following will throw an error if you try running it because your network is too small. So this figure can't be generated for this dataset.
	
	python ./visualization/plot_density.py --rand-net ./testing/toy_network_four_consis_edges/output/network_output/random_networks_synthesized.csv --pickle ./testing/toy_network_four_consis_edges/output/network_output/inputs_for_downstream_plots.pickle






